! Goal is not to exhaustively test all combinations, but rather at least
! one variant along each axis:
! Reference comparison:  default real scalar


module Test_AssertNotEqual_Real
   use, intrinsic :: iso_fortran_env, only: REAL32, REAL64
   use, intrinsic :: iso_fortran_env, only: REAL128
   use pf_StringUtilities
   use pf_SourceLocation
   use pf_Exceptionlist
   use FUnit, only: SourceLocation, throw, anyExceptions, AssertExceptionRaised
   use pf_AssertBasic
   use pf_AssertReal_0d
   use pf_AssertReal_1d
   use pf_AssertReal_2d
   use pf_AssertReal_3d
#ifdef _REAL32_IEEE_SUPPORT
      use MakeInf, only:  makeInf_32
      use MakeInf, only:  strInf
#endif
#ifdef _REAL64_IEEE_SUPPORT
      use MakeInf, only:  makeInf_64
#endif
#ifdef _REAL128_IEEE_SUPPORT
      use MakeInf, only:  makeInf_128
#endif
   implicit none
      
   @suite(name='AssertNotEqual_Real_suite')

   real(kind=REAL32), parameter :: good = 1
   real(kind=REAL32), parameter :: bad  = -999

   character(len=1), parameter :: NL = new_line('a')
contains


   ! First a series of tests that should not raise exceptions.

   @test
   subroutine test_notEqual_scalar()
      @assertNotEqual(1, 1.1)
      @assertNotEqual(1.0, 1.1)
      @assertNotEqual(1.0, 1.1)

#ifdef _REAL32
      @assertNotEqual(1, 1.1_REAL32)
      @assertNotEqual(1.0, 1.1_REAL32)
      @assertNotEqual(1.0_REAL32, 1.1_REAL32)
#endif

#ifdef _REAL64
      @assertNotEqual(1, 1.1_REAL64)
      @assertNotEqual(1.0, 1.1_REAL64)
      @assertNotEqual(1.0_REAL64, 1.1_REAL64)
#endif

#ifdef _REAL128
      @assertNotEqual(1, 1.1_REAL128)
      @assertNotEqual(1.0, 1.1_REAL128)
      @assertNotEqual(1.0_REAL128, 1.1_REAL128)
#endif
   end subroutine test_notEqual_scalar

   @test
   subroutine test_notEqual_scalar_with_tolerance()
      @assertNotEqual(1, 1.1, 0.05)
      @assertNotEqual(1.0, 1.1, 0.05)
      @assertNotEqual(1.0, 1.1, 0.05)

#ifdef _REAL32
      @assertNotEqual(1, 1.1_REAL32, 0.05)
      @assertNotEqual(1.0, 1.1_REAL32, 0.05)
      @assertNotEqual(1.0_REAL32, 1.1_REAL32, 0.05)

      @assertNotEqual(1, 1.1_REAL32, 0.05_REAL32)
      @assertNotEqual(1.0, 1.1_REAL32, 0.05_REAL32)
      @assertNotEqual(1.0_REAL32, 1.1_REAL32, 0.05_REAL32)
#endif
      
#ifdef _REAL64
      @assertNotEqual(1, 1.1_REAL64, 0.05)
      @assertNotEqual(1.0, 1.1_REAL64, 0.05)
      @assertNotEqual(1.0_REAL64, 1.1_REAL64, 0.05)

      @assertNotEqual(1, 1.1_REAL64, 0.05_REAL64)
      @assertNotEqual(1.0, 1.1_REAL64, 0.05_REAL64)
      @assertNotEqual(1.0_REAL64, 1.1_REAL64, 0.05_REAL64)
#endif

#ifdef _REAL128
      @assertNotEqual(1, 1.1_REAL128, 0.05)
      @assertNotEqual(1.0, 1.1_REAL128, 0.05)
      @assertNotEqual(1.0_REAL128, 1.1_REAL128, 0.05)

      @assertNotEqual(1, 1.1_REAL128, 0.05_REAL128)
      @assertNotEqual(1.0, 1.1_REAL128, 0.05_REAL128)
      @assertNotEqual(1.0_REAL128, 1.1_REAL128, 0.05_REAL128)
#endif

   end subroutine test_notEqual_scalar_with_tolerance

   @test
   subroutine test_notEqual_1D_actual
      real :: off1 = nearest(1.0,-1.)
      real :: off2 = nearest(2.0,+1.)
#ifdef _REAL32
      real(kind=REAL32) :: off1_32 = nearest(1.0_REAL32,-1.)
      real(kind=REAL32) :: off2_32 = nearest(2.0_REAL32,+1.)
#endif
#ifdef _REAL64
      real(kind=REAL64) :: off1_64 = nearest(1.0_REAL64,-1.)
      real(kind=REAL64) :: off2_64 = nearest(2.0_REAL64,+1.)
#endif
#ifdef _REAL128
      real(kind=REAL128) :: off1_128 = nearest(1.0_REAL128,-1.)
      real(kind=REAL128) :: off2_128 = nearest(2.0_REAL128,+1.)
#endif
      
      @assertNotEqual(1, [off1])
      @assertNotEqual(1.0, [off1,off1,off1])
      @assertNotEqual(1.0, [off1,off1,off1])
      @assertNotEqual([1,2], [off1,off2])
      @assertNotEqual([1.0,2.0], [off1,off2])
      @assertNotEqual([1.0,2.0], [off1,off2])

#ifdef _REAL32
      @assertNotEqual(1, [off1_32])
      @assertNotEqual(1.0, [off1_32,off1_32,off1_32])
      @assertNotEqual(1.0_REAL32, [off1_32,off1_32,off1_32])
      @assertNotEqual([1,2], [off1_32,off2_32])
      @assertNotEqual([1.0,2.0], [off1_32,off2_32])
      @assertNotEqual([1.0_REAL32,2.0_REAL32], [off1_32,off2_32])
#endif

#ifdef _REAL64
      @assertNotEqual(1, [off1_64])
      @assertNotEqual(1.0, [off1_64,off1_64,off1_64])
      @assertNotEqual(1.0_REAL64, [off1_64,off1_64,off1_64])
      @assertNotEqual([1,2], [off1_64,off2_64])
      @assertNotEqual([1.0,2.0], [off1_64,off2_64])
      @assertNotEqual([1.0_REAL64,2.0_REAL64], [off1_64,off2_64])
#endif


#ifdef _REAL128
      @assertNotEqual(1, [off1_128])
      @assertNotEqual(1.0, [off1_128,off1_128,off1_128])
      @assertNotEqual(1.0_REAL128, [off1_128,off1_128,off1_128])
      @assertNotEqual([1,2], [off1_128,off2_128])
      @assertNotEqual([1.0,2.0], [off1_128,off2_128])
      @assertNotEqual([1.0_REAL128,2.0_REAL128], [off1_128,off2_128])
#endif
      
   end subroutine test_notEqual_1D_actual

   @test
   subroutine test_notEqual_1D_actual_with_tolerance

      @assertNotEqual(1, [1.1], 0.05)
      @assertNotEqual(1.0, [1.1,1.1,1.1], 0.05)
      @assertNotEqual([1,2], [1.1,2.1], 0.05)
      @assertNotEqual([1.0,2.0], [1.1,2.1], 0.05)

#ifdef _REAL32      
      @assertNotEqual(1, [1.1_REAL32], 0.05)
      @assertNotEqual(1.0, [1.1_REAL32,1.1_REAL32,1.1_REAL32], 0.05)
      @assertNotEqual([1,2], [1.1_REAL32,2.1_REAL32], 0.05)
      @assertNotEqual([1.0,2.0], [1.1_REAL32,2.1_REAL32], 0.05)

      @assertNotEqual(1, [1.1_REAL32], 0.05_REAL32)
      @assertNotEqual(1.0, [1.1_REAL32,1.1_REAL32,1.1_REAL32], 0.05_REAL32)
      @assertNotEqual([1,2], [1.1_REAL32,2.1_REAL32], 0.05_REAL32)
      @assertNotEqual([1.0,2.0], [1.1_REAL32,2.1_REAL32], 0.05_REAL32)
#endif

#ifdef _REAL64
      @assertNotEqual(1, [1.1_REAL64], 0.05)
      @assertNotEqual(1.0, [1.1_REAL64,1.1_REAL64,1.1_REAL64], 0.05)
      @assertNotEqual([1,2], [1.1_REAL64,2.1_REAL64], 0.05)
      @assertNotEqual([1.0,2.0], [1.1_REAL64,2.1_REAL64], 0.05)

      @assertNotEqual(1, [1.1_REAL64], 0.05_REAL64)
      @assertNotEqual(1.0, [1.1_REAL64,1.1_REAL64,1.1_REAL64], 0.05_REAL64)
      @assertNotEqual([1,2], [1.1_REAL64,2.1_REAL64], 0.05_REAL64)
      @assertNotEqual([1.0,2.0], [1.1_REAL64,2.1_REAL64], 0.05_REAL64)
#endif

#ifdef _REAL128
      @assertNotEqual(1, [1.1_REAL128], 0.05)
      @assertNotEqual(1.0, [1.1_REAL128,1.1_REAL128,1.1_REAL128], 0.05)
      @assertNotEqual([1,2], [1.1_REAL128,2.1_REAL128], 0.05)
      @assertNotEqual([1.0,2.0], [1.1_REAL128,2.1_REAL128], 0.05)

      @assertNotEqual(1, [1.1_REAL128], 0.05_REAL128)
      @assertNotEqual(1.0, [1.1_REAL128,1.1_REAL128,1.1_REAL128], 0.05_REAL128)
      @assertNotEqual([1,2], [1.1_REAL128,2.1_REAL128], 0.05_REAL128)
      @assertNotEqual([1.0,2.0], [1.1_REAL128,2.1_REAL128], 0.05_REAL128)
#endif
      
   end subroutine test_notEqual_1D_actual_with_tolerance

   
   @test
   subroutine test_notEqual_2D_actual
      integer :: const(2,3) = reshape([1,1,1,1,1,1],[2,3])
      integer :: array(2,3) = reshape([1,2,3,4,5,6],[2,3])
      
      @assertNotEqual(1, real(const) + 0.1)
      @assertNotEqual(1.0, real(const) + 0.1)

      @assertNotEqual(array, real(array) + 0.1)
      @assertNotEqual(real(array), real(array) +0.1)

#ifdef _REAL32
      @assertNotEqual(1, real(const,kind=REAL32) + 0.1)
      @assertNotEqual(1.0, real(const,kind=REAL32) + 0.1)
      @assertNotEqual(1.0_REAL32, real(const,kind=REAL32) + 0.1)

      @assertNotEqual(array, real(array,kind=REAL32) + 0.1)
      @assertNotEqual(real(array), real(array,kind=REAL32) + 0.1)
      @assertNotEqual(real(array,kind=REAL32), real(array,kind=REAL32) + 0.1)
#endif

#ifdef _REAL64
      @assertNotEqual(1, real(const,kind=REAL64) + 0.1)
      @assertNotEqual(1.0, real(const,kind=REAL64) + 0.1)
      @assertNotEqual(1.0_REAL64, real(const,kind=REAL64) + 0.1)

      @assertNotEqual(array, real(array,kind=REAL64) + 0.1)
      @assertNotEqual(real(array), real(array,kind=REAL64) + 0.1)
      @assertNotEqual(real(array,kind=REAL64), real(array,kind=REAL64) + 0.1)
#endif


#ifdef _REAL128
      @assertNotEqual(1, real(const,kind=REAL128) + 0.1)
      @assertNotEqual(1.0, real(const,kind=REAL128) + 0.1)
      @assertNotEqual(1.0_REAL128, real(const,kind=REAL128) + 0.1)

      @assertNotEqual(array, real(array,kind=REAL128) + 0.1)
      @assertNotEqual(real(array), real(array,kind=REAL128) + 0.1)
      @assertNotEqual(real(array,kind=REAL128), real(array,kind=REAL128) + 0.1)
#endif
      
   end subroutine test_notEqual_2D_actual

   @test
   subroutine test_notEqual_2D_actual_with_tolerance
      integer :: const(2,3) = reshape([1,1,1,1,1,1],[2,3])
      integer :: array(2,3) = reshape([1,2,3,4,5,6],[2,3])
      
      @assertNotEqual(1, real(const)+1, 0.5)
      @assertNotEqual(1.0, real(const)+1, 0.5)

      @assertNotEqual(array, real(array)+1, 0.5)
      @assertNotEqual(real(array), real(array)+1,0.5)

#ifdef _REAL32
      @assertNotEqual(1, real(const,kind=REAL32)+1, 0.5_REAL32)
      @assertNotEqual(1.0, real(const,kind=REAL32)+1, 0.5_REAL32)
      @assertNotEqual(1.0_REAL32, real(const,kind=REAL32)+1, 0.5_REAL32)

      @assertNotEqual(array, real(array,kind=REAL32)+1, 0.5_REAL32)
      @assertNotEqual(real(array), real(array,kind=REAL32)+1, 0.5_REAL32)
      @assertNotEqual(real(array,kind=REAL32), real(array,kind=REAL32)+1, 0.5_REAL32)

      @assertNotEqual(1, real(const,kind=REAL32)+1, 0.5)
      @assertNotEqual(1.0, real(const,kind=REAL32)+1, 0.5)
      @assertNotEqual(1.0_REAL32, real(const,kind=REAL32)+1, 0.5)

      @assertNotEqual(array, real(array,kind=REAL32)+1, 0.5)
      @assertNotEqual(real(array), real(array,kind=REAL32)+1, 0.5)
      @assertNotEqual(real(array,kind=REAL32), real(array,kind=REAL32)+1, 0.5)
#endif

#ifdef _REAL64
      @assertNotEqual(1, real(const,kind=REAL64)+1, 0.5_REAL64)
      @assertNotEqual(1.0, real(const,kind=REAL64)+1, 0.5_REAL64)
      @assertNotEqual(1.0_REAL64, real(const,kind=REAL64)+1, 0.5_REAL64)

      @assertNotEqual(array, real(array,kind=REAL64)+1, 0.5_REAL64)
      @assertNotEqual(real(array), real(array,kind=REAL64)+1, 0.5_REAL64)
      @assertNotEqual(real(array,kind=REAL64), real(array,kind=REAL64)+1, 0.5_REAL64)

      @assertNotEqual(1, real(const,kind=REAL64)+1, 0.5)
      @assertNotEqual(1.0, real(const,kind=REAL64)+1, 0.5)
      @assertNotEqual(1.0_REAL64, real(const,kind=REAL64)+1, 0.5)

      @assertNotEqual(array, real(array,kind=REAL64)+1, 0.5)
      @assertNotEqual(real(array), real(array,kind=REAL64)+1, 0.5)
      @assertNotEqual(real(array,kind=REAL64), real(array,kind=REAL64)+1, 0.5)
#endif


#ifdef _REAL128
      @assertNotEqual(1, real(const,kind=REAL128)+1, 0.5_REAL128)
      @assertNotEqual(1.0, real(const,kind=REAL128)+1, 0.5_REAL128)
      @assertNotEqual(1.0_REAL128, real(const,kind=REAL128)+1, 0.5_REAL128)

      @assertNotEqual(array, real(array,kind=REAL128)+1, 0.5_REAL128)
      @assertNotEqual(real(array), real(array,kind=REAL128)+1, 0.5_REAL128)
      @assertNotEqual(real(array,kind=REAL128), real(array,kind=REAL128)+1, 0.5_REAL128)

      @assertNotEqual(1, real(const,kind=REAL128)+1, 0.5)
      @assertNotEqual(1.0, real(const,kind=REAL128)+1, 0.5)
      @assertNotEqual(1.0_REAL128, real(const,kind=REAL128)+1, 0.5)

      @assertNotEqual(array, real(array,kind=REAL128)+1, 0.5)
      @assertNotEqual(real(array), real(array,kind=REAL128)+1, 0.5)
      @assertNotEqual(real(array,kind=REAL128), real(array,kind=REAL128)+1, 0.5)
#endif
      
   end subroutine test_notEqual_2D_actual_with_tolerance

   ! Ensure that Infinity does not cause floating exceptions
   @test
   subroutine test_infinity()
#ifdef _REAL32_IEEE_SUPPORT
      @assertNotEqual(makeInf_32(), nearest(makeInf_32(),-1.))
      @assertNotEqual(makeInf_32(), nearest(makeInf_32(),-1.), 0.5)
#endif
#ifdef _REAL64_IEEE_SUPPORT
      @assertNotEqual(makeInf_64(), nearest(makeInf_64(),-1.))
      @assertNotEqual(makeInf_64(), nearest(makeInf_64(),-1.), 0.5_REAL64)
#endif
#ifdef _REAL128_IEEE_SUPPORT
      @assertNotEqual(makeInf_128(), nearest(makeInf_128(),-1.))
      @assertNotEqual(makeInf_128(), nearest(makeInf_128(),-1.), 0.5_REAL128)
#endif

   end subroutine test_infinity

   @test
   subroutine test_infinity_1d()

#ifdef _REAL32_IEEE_SUPPORT
      @assertIsFinite(1._REAL64)
      @assertNotEqual([1._REAL32,makeInf_32()], [nearest(1._REAL32,+1.),nearest(makeInf_32(),-1.)])
#endif
#ifdef _REAL64_IEEE_SUPPORT
      @assertNotEqual([1._REAL64,makeInf_64()], [nearest(1._REAL64,+1.),nearest(makeInf_64(),-1.)])
#endif
#ifdef _REAL128_IEEE_SUPPORT
      @assertNotEqual([1._REAL128,makeInf_128()], [nearest(1._REAL128,+1.),nearest(makeInf_128(),-1.)])
#endif

   end subroutine test_infinity_1d


   ! OK - now a long series of tests that verify the expected
   ! messages from failing asserts.   Each test has an assertion that is
   ! intended to fail, followed by an assertExceptionRaised() that is expected
   ! to succeed and "eat" the first exception.  
   @test
   subroutine test_conformability_a()
      call assertNotEqual([1.0], [1.0, 1.0])
      call assertExceptionRaised( &
           & 'Arrays not conformable failure:' // NL // &
           & '    Expected shape: [1]' // NL // &
           & '      Actual shape: [2]' &
           & )
   end subroutine test_conformability_a

   @test
   subroutine test_conformability_b()
      call assertNotEqual([1.0,2.0], [1.0])
      call assertExceptionRaised( &
           & 'Arrays not conformable failure:' // NL // &
           & '    Expected shape: [2]' // NL // &
           & '      Actual shape: [1]' &
           & )
   end subroutine test_conformability_b
   

   @test
   subroutine test_notEqual_fail_scalar_no_tolerance()
      call assertNotEqual(1.0, 1.0)
      call assertExceptionRaised(&
           & 'AssertNotEqual failure:' // NL // &
           & '    Same value: <'//to_string(1.0)//'>' // NL // &
           & '    Difference: <'//to_string(0.)//'> (less than or equal to tolerance of '//to_string(0.)//')' &
           & )
   end subroutine test_notEqual_fail_scalar_no_tolerance

   @test
   subroutine test_notEqual_fail_scalar_with_tolerance()
      call assertNotEqual(1.0, 1.1, 0.5)
      call assertExceptionRaised(&
           & 'AssertNotEqual failure:' // NL // &
           & '    Same value: <'//to_string(1.1)//'>' // NL // &
           & '    Difference: <'//to_string(1.1-1.0)//'> (less than or equal to tolerance of '//to_string(0.5)//')' &
           & )
   end subroutine test_notEqual_fail_scalar_with_tolerance

   @test
   subroutine test_notEqual_fail_1d_with_tolerance()
      call assertNotEqual(1, [2.0,1.0], 0.1)
      call assertExceptionRaised(&
           & 'ArrayAssertNotEqual failure:' // NL // &
           & '    Same value: <'//to_string(1.0)//'>' // NL // &
           & '    Difference: <'//to_string(0.)//'> (less than or equal to tolerance of '//to_string(0.1)//')' // NL //  &
           & '      at index: [2]' &
           & )
   end subroutine test_notEqual_fail_1d_with_tolerance

  @test
  subroutine testNotEqual_2D_SingleElementDifferent()

    real, dimension(2,2) :: expected, found

    expected = good
    found = bad; found(1,2) = good

    ! The following should throw an exception...
    call assertNotEqual(expected, found)

    call assertExceptionRaised( &
         & 'ArrayAssertNotEqual failure:' // NL // &
         & '    Same value: <'//to_string(1.0)//'>' // NL // &
         & '    Difference: <'//to_string(0.)//'> (less than or equal to tolerance of '//to_string(0.)//')'  // NL // &
         & '      at index: [1,2]' &
         )

  end subroutine testNotEqual_2D_SingleElementDifferent

  @test
  subroutine testNotEqual_2d_MultipleDiffs

    real, dimension(2,3) :: expected, found

    expected = good
    found = bad; found(2,[1,3]) = good

    ! The following should throw an exception...
    call assertNotEqual(expected, found)

    call assertExceptionRaised( &
         & 'ArrayAssertNotEqual failure:' // NL // &
         & '    Same value: <'//to_string(1.0)//'>' // NL // &
         & '    Difference: <'//to_string(0.)//'> (less than or equal to tolerance of '//to_string(0.)//')'  // NL // &
         & '      at index: [2,1]' &
         )

 end subroutine testNotEqual_2d_MultipleDiffs

  @test
  subroutine testNotEqual_ScalarInf_unequal_A()
    
    call assertNotEqual(makeInf_32(), makeInf_32())

    call assertExceptionRaised( &
         & 'AssertNotEqual failure:' // NL // &
         & '    Same value: <'//strInf()//'>' // NL // &
         & '    Difference: <'//to_string(0.)//'> (less than or equal to tolerance of '//to_string(0.)//')' &
         )

  end subroutine testNotEqual_ScalarInf_unequal_A

  @test
  subroutine testNotEqual_ScalarInf_unequal_B()
    
    call assertNotEqual(makeInf_32(), makeInf_32(), 2._REAL32)

    call assertExceptionRaised( &
         & 'AssertNotEqual failure:' // NL // &
         & '    Same value: <'//strInf()//'>' // NL // &
         & '    Difference: <'//to_string(0.)//'> (less than or equal to tolerance of '//to_string(2.0)//')' &
         )
 end subroutine testNotEqual_ScalarInf_unequal_B
   
 function to_string(x) result(str)
    real, intent(in) :: x
    character(len=:), allocatable :: str

    character(255) :: buffer
    write(buffer,'(g0)') x
    str = trim(buffer)

 end function to_string

end module Test_AssertNotEqual_Real
   
