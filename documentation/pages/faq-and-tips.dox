
/*!

\page page_FAQAndTips FAQ and Tips

<ul>
   <li>\ref sec_FAQ</li>
   <ul>
   <li>\ref ZeroTestsRun</li>
   <li>\ref SomeOfMyTestsAreNotRunning</li>
   <li>\ref FAQIntel13</li>
   <li>\ref FAQSegAndLinkFaults</li>
   </ul>
   <li>\ref sec_Tips</li>
   <ul>
   <li>\ref TipEnvironmentModules</li>
   <li>\ref TipCompileTimeErrors</li>
   <li>\ref TipIntermediateFiles</li>
   <li>\ref TipWhitespace</li>
   </ul>
</ul>

\section sec_FAQ FAQ

\subsection ZeroTestsRun Zero Tests Run
<p><em>Symptom:</em>  The system under test compiles and runs fine, but reports zero tests run.</p>
<p><em>Solutions:</em>
<ul><li>There is no <code>testSuites.inc</code> file.  Please add a <code>testSuites.inc</code> that lists the suites to add via <code>ADD_TEST_SUITE(</code><em>the_suite_to_add</em><code>)</code>, one to a line.</li>
<li>There is no <code>-DUSE_MPI</code> passed to the compiler during the build. Please add to the compiler invokation.  Please see \ref SomeOfMyTestsAreNotRunning.</li></ul></p>
\subsection SomeOfMyTestsAreNotRunning Some Tests Are Not Running
<em>Symptom:</em>  The system under test compiles and runs fine, but reports that some tests don't run.
<p><em>Solutions:</em>
<ul><li>There is no <code>-DUSE_MPI</code> passed to the compiler during the build.  Please add as in the following example.
\code
% $PFUNIT/bin/funitproc test_pio.pf test_pio.F90
% mpif90 -DUSE_MPI $PFUNIT/include/driver.F90 \
%     -I$PFUNIT/mod -L$PFUNIT/lib -lpfunit test_pio.F90

% mpirun -np 8 ./a.out

.
Time:         0.004 seconds
  
 OK\endcode
</li></ul></p>

\subsection FAQIntel13 Intel Fortran Version 13: -DINTEL_13

Using version 13 is deprecated. We have encountered problems using
version 13, which we believe may be due to subtle compiler bugs.  We
strongly recommend upgrading to the latest version possible.

To make pFUnit work with Intel Fortran Version 13, please ensure that
<code>-DINTEL_13</code> is passed to the compiler when building or
using pFUnit. In the build process for pFUnit, this is added to the
make variables CPPFLAGS and FPPFLAGS.

\subsection FAQSegAndLinkFaults Segmentation Faults and Odd Link Errors

Q. pFUnit fails to build or now leads to segmentation faults.  Did something change?

A. One cause for failure to build or odd runtime segmentation faults is when we change compiler configurations and some object or library files are left over from a previous environment.  This might be hard to spot, for example, during compiler upgrades.  Switching from one compiler to another, e.g. from Intel to GNU, is more likely to generate link-time errors if old code is still around.  A few items to check follow.

<ul>
<li>Execute <em>make distclean</em> or remove objects (or their directories if using CMAKE) associated with previous builds.</li>
<li>Ensure pFUnit and user applications are compiled using compatible (or the same) compilers.</li>
<li>Ensure the environment variable PFUNIT is set to the appropriate install directory.</li>
</ul>

Finally, it is quite possible that a bug has been uncovered.  Please contact the development team or open a <a href="https://sourceforge.net/p/pfunit/bugs/?source=navbar">bug ticket</a>.


\section sec_Tips Tips

\subsection TipEnvironmentModules Environment Modules
Though not strictly required, the Environment
Modules package can be a convenient way to package, maintain, and
switch between environments.  This can be particularly important for
pFUnit, which must be built using the same tool suite being used for
development, e.g. compilers, linkers, etc. [To do:  A sample pFUnit
modulefile is provided in the OTHER directory.] 

\subsection TipCompileTimeErrors Compile Time Errors
Compile time errors like '"include [...]include/.mk" not found'
likely signify that you are not executing make in the top level
directory during a build.  Alternatively, during regular usage after
installation, PFUNIT has not been set. 

During building, if you wish to compile in a subdirectory within the
pFUnit heriarchy, please try setting the COMPILER environment variable
on the make command line.  For example:

\code
$ make all COMPILER=Intel\endcode

\subsection TipIntermediateFiles Intermediate files used by pFUnit
If you wish to see the intermediate files, use the target .PRECIOUS
in the makefile to keep them from being deleted. For example:

\code
# In GNUmakefile
.PRECIOUS: %_cpp.F90\endcode 

\subsection TipWhitespace Ignoring whitespace differences in assertions on strings.
Several options exist for how to compare strings with assertEqual.

\code
call assertEqual(expectedString, foundString, &
               & whitespace=IGNORE_DIFFERENCES )\endcode

<strong>WhitespaceOptions:</strong>
<ul>
<li><strong>IGNORE_DIFFERENCES</strong> ignores whitespace differences (number and value).</li>
<li><strong>IGNORE_ALL</strong> strictly ignores all whitespace (spaces & tabs).</li>
<li><strong>TRIM_ALL</strong> strictly ignores leading and trailing whitespace.  </li>
<li><strong>KEEP_ALL</strong> keeps all whitespace as significant, even discriminating
           between tabs and spaces.</li>
</ul>

Example usages can be seen in tests/Test_AssertBasic.F90 or
Examples/Simple/tests/helloWorld.pf.

*/
