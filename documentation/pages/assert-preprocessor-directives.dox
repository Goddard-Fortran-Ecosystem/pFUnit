
/*!

\page page_Assert @Assert Preprocessor Directives

<ul>
   <li>\ref ss_assertEqual</li>
   <li>\ref ss_assertTrue</li>
   <li>\ref ss_assertEqualUserDefined</li>
   <li>\ref ss_assertFalse</li>
   <li>\ref ss_assertLessThan</li>
   <li>\ref ss_assertLessThanOrEqual</li>
   <li>\ref ss_assertGreaterThan</li>
   <li>\ref ss_assertGreaterThanOrEqual</li>
   <li>\ref ss_assertIsMemberOf</li>
   <li>\ref ss_assertContains</li>
   <li>\ref ss_assertAny</li>
   <li>\ref ss_assertAll</li>
   <li>\ref ss_assertNotAll</li>
   <li>\ref ss_assertNone</li>
   <li>\ref ss_assertIsPermutationOf</li>
   <li>\ref ss_assertExceptionRaised</li>
   <li>\ref ss_assertSameShape</li>
   <li>\ref ss_assertIsNaN</li>
   <li>\ref ss_assertIsFinite</li>
   <li>\ref ss_assertAssociated</li>
   <li>\ref ss_assertNotAssociated</li>
   <li>\ref ss_assertEquivalent</li>
</ul>

\section sec_AssertPreprocessorDirectivesReference @Assert Preprocessor Directives Reference

\subsection ss_assertEqual @assertEqual

Performs an exact match comparison of expected and actual values of various types.

\subsubsection sss_assertEqualReference Reference

Registers a test failure if `expected` does not equal `actual`.

<details open>
   <summary><strong>Integer scalar comparison</strong></summary>
   \code{fortran}
   @assertEqual(INTEGER(KIND=INT8)    expected,          INTEGER(KIND=INT8)  actual,          CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=INT16)   expected,          INTEGER(KIND=INT16) actual,          CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=INT32)   expected,          INTEGER(KIND=INT32) actual,          CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=INT64)   expected,          INTEGER(KIND=INT64) actual,          CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=KIND(1)) expected,          INTEGER(KIND=INT8)  actual,          CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=KIND(1)) expected,          INTEGER(KIND=INT16) actual,          CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=KIND(1)) expected,          INTEGER(KIND=INT64) actual,          CHARACTER(len=*) OPTIONAL message)
   \endcode
</details>


<details>
   <summary><strong>Integer array comparison</strong></summary>

   \code{fortran}
   @assertEqual(INTEGER(KIND=INT8)    expected,          INTEGER(KIND=INT8)  actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=INT16)   expected,          INTEGER(KIND=INT16) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=INT32)   expected,          INTEGER(KIND=INT32) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=INT64)   expected,          INTEGER(KIND=INT64) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=KIND(1)) expected,          INTEGER(KIND=INT8)  actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=KIND(1)) expected,          INTEGER(KIND=INT16) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=KIND(1)) expected,          INTEGER(KIND=INT64) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=INT8)    expected(<shape>), INTEGER(KIND=INT8)  actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=INT16)   expected(<shape>), INTEGER(KIND=INT16) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=INT32)   expected(<shape>), INTEGER(KIND=INT32) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=INT64)   expected(<shape>), INTEGER(KIND=INT64) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=KIND(1)) expected(<shape>), INTEGER(KIND=INT8)  actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=KIND(1)) expected(<shape>), INTEGER(KIND=INT16) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertEqual(INTEGER(KIND=KIND(1)) expected(<shape>), INTEGER(KIND=INT64) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   \endcode
   
   Where `<shape>` is one of

   <ul>
      <li>`(:)`</li>
      <li>`(:,:)`</li>
      <li>`(:,:,:)`</li>
      <li>`(:,:,:,:)`</li>
      <li>`(:,:,:,:,:)`</li>
   </ul>

   For scalar to array comparisons, the scalar expected value is converted to an array of shape
   equal to the actual value before comparison.

</details>


<details>
   <summary><strong>Character Array comparison</strong></summary>
   \code{fortran}
   @assertEqual(CHARACTER(len=*) expected,    CHARACTER(len=*) actual,    CHARACTER(len=*) OPTIONAL message, TYPE(WhitespaceOptions) OPTIONAL whitespace)
   @assertEqual(CHARACTER(len=*) expected,    CHARACTER(len=*) actual(:), CHARACTER(len=*) OPTIONAL message, TYPE(WhitespaceOptions) OPTIONAL whitespace)
   @assertEqual(CHARACTER(len=*) expected(:), CHARACTER(len=*) actual(:), CHARACTER(len=*) OPTIONAL message, TYPE(WhitespaceOptions) OPTIONAL whitespace)
   \endcode

   Where `WhitespaceOptions` can be one of
   <ul>
      <li><strong>IGNORE_DIFFERENCES</strong> ignores whitespace differences (number and value).</li>
      <li><strong>IGNORE_ALL</strong> strictly ignores all whitespace (spaces & tabs).</li>
      <li><strong>TRIM_ALL</strong> strictly ignores leading and trailing whitespace.  </li>
      <li><strong>KEEP_ALL</strong> keeps all whitespace as significant, even discriminating between tabs and spaces.</li>
   </ul>

   For the comparison of a 1D expected character array to 2D actual character array, each element
   of the actual array is compared to the expected array.
   
</details>

\subsection ss_assertTrue @assertTrue

Verifies a provided condition is true.

\subsubsection sss_assertTrueReference Reference

Registers a test failure if `condition` is `.False.`.

\code{fortran}
@assertTrue(LOGICAL condition,    CHARACTER(len=*) OPTIONAL message)
@assertTrue(LOGICAL condition(:), CHARACTER(len=*) OPTIONAL message)
\endcode

When verifying an array of logicals, all elements of the condition array must be true.

\subsection ss_assertEqualUserDefined @assertEqualUserDefined

A convenience function that allows a user to write

\code{fortran}
@assertEqualUserDefined(a, b)
\endcode

instead of 

\code{fortran}
call assertTrue(a==b,...)
\endcode

while a more instructive error message about the arguments and
source code position is added by the preprocessor.  The user may
add an error message as follows.

\code{fortran}
@assertEqualUserDefined(a,b,message='a and b should be equal here.')
\endcode

\subsection ss_assertFalse @assertFalse

Verifies a provided condition is false.

\subsubsection sss_assertFalseReference Reference

Registers a test failure if `condition` is `.True.`.

\code{fortran}
@assertFalse(LOGICAL condition,    CHARACTER(len=*) OPTIONAL message)
@assertFalse(LOGICAL condition(:), CHARACTER(len=*) OPTIONAL message)
\endcode

When verifying an array of logicals, all elements of the condition array must be false.

\subsection ss_assertLessThan @assertLessThan

Performs a less than comparison of expected and actual values of various types.

\subsubsection ss_assertLessThanReference Reference

Registers a test failure if the `expected` value is more than or equal to the `actual`
value

<details open>
   <summary><strong>Integer scalar comparison</strong></summary>
   \code{fortran}
   @assertLessThan(INTEGER(KIND=INT8)    expected,          INTEGER(KIND=INT8)  actual,          CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=INT16)   expected,          INTEGER(KIND=INT16) actual,          CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=INT32)   expected,          INTEGER(KIND=INT32) actual,          CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=INT64)   expected,          INTEGER(KIND=INT64) actual,          CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1)) expected,          INTEGER(KIND=INT8)  actual,          CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1)) expected,          INTEGER(KIND=INT16) actual,          CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1)) expected,          INTEGER(KIND=INT64) actual,          CHARACTER(len=*) OPTIONAL message)
   \endcode
</details>

<details>
   <summary><strong>Integer array comparison</strong></summary>
   \code{fortran}
   @assertLessThan(INTEGER(KIND=INT8)    expected,          INTEGER(KIND=INT8)  actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=INT16)   expected,          INTEGER(KIND=INT16) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=INT32)   expected,          INTEGER(KIND=INT32) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=INT64)   expected,          INTEGER(KIND=INT64) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1)) expected,          INTEGER(KIND=INT8)  actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1)) expected,          INTEGER(KIND=INT16) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1)) expected,          INTEGER(KIND=INT64) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=INT8)    expected(<shape>), INTEGER(KIND=INT8)  actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=INT16)   expected(<shape>), INTEGER(KIND=INT16) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=INT32)   expected(<shape>), INTEGER(KIND=INT32) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=INT64)   expected(<shape>), INTEGER(KIND=INT64) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1)) expected(<shape>), INTEGER(KIND=INT8)  actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1)) expected(<shape>), INTEGER(KIND=INT16) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1)) expected(<shape>), INTEGER(KIND=INT64) actual(<shape>), CHARACTER(len=*) OPTIONAL message)
   \endcode

   Where `<shape>` is one of

   <ul>
      <li>`(:)`</li>
      <li>`(:,:)`</li>
      <li>`(:,:,:)`</li>
      <li>`(:,:,:,:)`</li>
      <li>`(:,:,:,:,:)`</li>
   </ul>

   For scalar to array comparisons, the scalar expected value is converted to an array of shape
   equal to the actual value before comparison.
</details>

<details>
   <summary><strong>Real scalar comparison</strong></summary>
   \code{fortran}
   @assertLessThan(REAL(KIND=KIND(1.0))     expected, REAL(KIND=KIND(1.0))     actual, REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.0))     expected, REAL(KIND=KIND(1.d0))    actual, REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.0))     expected, REAL(KIND=KIND(1.d0))    actual, REAL(KIND=KIND(1.d0))    OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.0))     expected, REAL(KIND=KIND(REAL128)) actual, REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.0))     expected, REAL(KIND=KIND(REAL128)) actual, REAL(KIND=KIND(REAL128)) OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.d0))    expected, REAL(KIND=KIND(1.d0))    actual, REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.d0))    expected, REAL(KIND=KIND(1.d0))    actual, REAL(KIND=KIND(1.d0))    OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(REAL128)) expected, REAL(KIND=KIND(REAL128)) actual, REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(REAL128)) expected, REAL(KIND=KIND(REAL128)) actual, REAL(KIND=KIND(REAL128)) OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   \endcode
</details>

<details>
   <summary><strong>Real array comparison</strong></summary>
   \code{fortran}
   @assertLessThan(REAL(KIND=KIND(1.0))     expected,          REAL(KIND=KIND(1.0))     actual(<shape>), REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.0))     expected,          REAL(KIND=KIND(1.d0))    actual(<shape>), REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.0))     expected,          REAL(KIND=KIND(1.d0))    actual(<shape>), REAL(KIND=KIND(1.d0))    OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.0))     expected,          REAL(KIND=KIND(REAL128)) actual(<shape>), REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.0))     expected,          REAL(KIND=KIND(REAL128)) actual(<shape>), REAL(KIND=KIND(REAL128)) OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.d0))    expected,          REAL(KIND=KIND(1.d0))    actual(<shape>), REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.d0))    expected,          REAL(KIND=KIND(1.d0))    actual(<shape>), REAL(KIND=KIND(1.d0))    OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(REAL128)) expected,          REAL(KIND=KIND(REAL128)) actual(<shape>), REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(REAL128)) expected,          REAL(KIND=KIND(REAL128)) actual(<shape>), REAL(KIND=KIND(REAL128)) OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.0))     expected(<shape>), REAL(KIND=KIND(1.0))     actual(<shape>), REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.0))     expected(<shape>), REAL(KIND=KIND(1.d0))    actual(<shape>), REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.0))     expected(<shape>), REAL(KIND=KIND(1.d0))    actual(<shape>), REAL(KIND=KIND(1.d0))    OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.0))     expected(<shape>), REAL(KIND=KIND(REAL128)) actual(<shape>), REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.0))     expected(<shape>), REAL(KIND=KIND(REAL128)) actual(<shape>), REAL(KIND=KIND(REAL128)) OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.d0))    expected(<shape>), REAL(KIND=KIND(1.d0))    actual(<shape>), REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(1.d0))    expected(<shape>), REAL(KIND=KIND(1.d0))    actual(<shape>), REAL(KIND=KIND(1.d0))    OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(REAL128)) expected(<shape>), REAL(KIND=KIND(REAL128)) actual(<shape>), REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(REAL(KIND=KIND(REAL128)) expected(<shape>), REAL(KIND=KIND(REAL128)) actual(<shape>), REAL(KIND=KIND(REAL128)) OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   \endcode

   Where `<shape>` is one of

   <ul>
      <li>`(:)`</li>
      <li>`(:,:)`</li>
      <li>`(:,:,:)`</li>
      <li>`(:,:,:,:)`</li>
      <li>`(:,:,:,:,:)`</li>
   </ul>

   For scalar to array comparisons, the scalar expected value is converted to an array of shape
   equal to the actual value before comparison.
</details>

<details>
   <summary><strong>Mixed type scalar comparison</strong></summary>
   \code{fortran}
   @assertLessThan(INTEGER(KIND=KIND(1))    expected, REAL(KIND=(1.0))         actual, REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1))    expected, REAL(KIND=(1.d0))        actual, REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1))    expected, REAL(KIND=(1.d0))        actual, REAL(KIND=KIND(1.d0))    OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1))    expected, REAL(KIND=(REAL128))     actual, REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1))    expected, REAL(KIND=(REAL128))     actual, REAL(KIND=KIND(REAL128)) OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   \endcode
</details>

<details>
   <summary><strong>Mixed type array comparison</strong></summary>
   \code{fortran}
   @assertLessThan(INTEGER(KIND=KIND(1))    expected,          REAL(KIND=(1.0))         actual(<shape>), REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1))    expected,          REAL(KIND=(1.d0))        actual(<shape>), REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1))    expected,          REAL(KIND=(1.d0))        actual(<shape>), REAL(KIND=KIND(1.d0))    OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1))    expected,          REAL(KIND=(REAL128))     actual(<shape>), REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1))    expected,          REAL(KIND=(REAL128))     actual(<shape>), REAL(KIND=KIND(REAL128)) OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1))    expected(<shape>), REAL(KIND=(1.0))         actual(<shape>), REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1))    expected(<shape>), REAL(KIND=(1.d0))        actual(<shape>), REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1))    expected(<shape>), REAL(KIND=(1.d0))        actual(<shape>), REAL(KIND=KIND(1.d0))    OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1))    expected(<shape>), REAL(KIND=(REAL128))     actual(<shape>), REAL(KIND=KIND(1.0))     OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   @assertLessThan(INTEGER(KIND=KIND(1))    expected(<shape>), REAL(KIND=(REAL128))     actual(<shape>), REAL(KIND=KIND(REAL128)) OPTIONAL tolerance, CHARACTER(len=*) OPTIONAL message)
   \endcode

   Where `<shape>` is one of

   <ul>
      <li>`(:)`</li>
      <li>`(:,:)`</li>
      <li>`(:,:,:)`</li>
      <li>`(:,:,:,:)`</li>
      <li>`(:,:,:,:,:)`</li>
   </ul>

   For scalar to array comparisons, the scalar expected value is converted to an array of shape
   equal to the actual value before comparison.
</details>


\subsection ss_assertLessThanOrEqual @assertLessThanOrEqual
\subsection ss_assertGreaterThan @assertGreaterThan
\subsection ss_assertGreaterThanOrEqual @assertGreaterThanOrEqual
\subsection ss_assertIsMemberOf @assertIsMemberOf
\subsection ss_assertContains @assertContains
\subsection ss_assertAny @assertAny
\subsection ss_assertAll @assertAll
\subsection ss_assertNotAll @assertNotAll
\subsection ss_assertNone @assertNone
\subsection ss_assertIsPermutationOf @assertIsPermutationOf
\subsection ss_assertExceptionRaised @assertExceptionRaised
\subsection ss_assertSameShape @assertSameShape
\subsection ss_assertIsNaN @assertIsNaN
\subsection ss_assertIsFinite @assertIsFinite
\subsection ss_assertAssociated @assertAssociated
@assertAssociated maps to a call to the logical intrinsic function associated.

\code
@assertAssociated(a)
\endcode

becomes
\code
call assertTrue(associated(a))
\endcode

The directive also handles the two-argument pointer-target case.

\code
@assertAssociated(pointer,target)
\endcode

becomes

\code
call assertTrue(associated(pointer,target))
\endcode

neglecting message and source location information.

A message may be passed as follows.

\code
@assertAssociated(a,message="A message.")
\endcode

\code
@assertAssociated(pointer,target,message="A message.")
\endcode

\subsection ss_assertNotAssociated @assertNotAssociated

This directive is the same as assertAssociated, except that it maps to assertFalse.  This directive was originally released as assertUnAssociated.

\subsection ss_assertEquivalent @assertEquivalent
This directive compares two logical values and throws an exception annotated with some useful information.
We get a special directive for this one because comparing logicals uses the .eqv. infix operator in standard
Fortran. The arguments a and b below may be 1d arrays.
\code
@assertEquivalent(a,b)\endcode
becomes
\code
call assertTrue(a.eqv.b)\endcode
neglecting the specification of message and source location information.

*/
